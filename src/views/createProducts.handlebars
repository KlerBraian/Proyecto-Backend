<h1 class="titulo" id="titulo">Bienvenidos al portal del vendedor</h1>
<button class="options return">
    <a href="/">Volver</a>
</button>
<h2>Crear producto</h2>
<form class="crear-producto" onsubmit="agregarProducto(event)">
    <input type="text" id="title" class="productbox" placeholder="Titulo" required>
    <input type="text" id="thumbnail" class="productbox" placeholder="Ingrese url de la imagen" required>
    <input type="text" id="description" class="productbox" placeholder="Descripcion" required>
    <input type="text" id="category" class="productbox" placeholder="Categoria" required>
    <input type="text" id="code" class="productbox" placeholder="Codigo" required>
    <input type="number" id="price" class="productbox" placeholder="Precio" min="0" required>
    <input type="number" id="stock" class="productbox" placeholder="Stock" min="0" required>
    <button class="enviar" type="submit">Enviar</button>
</form>
<h2>Modificar producto</h2>
<form class="crear-producto" onsubmit="modificarProducto(event)">
     <input type="text" id="code" class="productbox" placeholder="Codigo" required>
    <input type="text" id="title" class="productbox" placeholder="Nuevo titulo">
    <input type="text" id="thumbnail" class="productbox" placeholder="Ingrese url de la nueva imagen" >
    <input type="number" id="price" class="productbox" placeholder="Nuevo Precio" min="0" >
    <input type="number" id="stock" class="productbox" placeholder="Nuevo Stock" min="0">
    <button class="enviar" type="submit">Enviar</button>
</form>
<h2>Borrar producto</h2>
<form class="crear-producto" onsubmit="borrarProducto(event)">
   <input type="text" id="code" class="productbox" placeholder="Codigo" required>
    <button class="enviar" type="submit">Enviar</button>
</form>


<script src=" https://cdn.jsdelivr.net/npm/sweetalert2@11.7.1/dist/sweetalert2.all.min.js "></script>
<script>
   
   // Función para agregar producto

async function obtenerProducto(code) {
    try {
        const response = await fetch('/api/products');
        const products = await response.json();
        const getProduct= products.payload.listProducts.find(product => code.toString() === product.code)._id
        return getProduct;
    } catch (error) {
        console.error('Error al obtener los productos:', error);
    }
}

function agregarProducto(event) {
    event.preventDefault();

    const form = event.target;

     if (
            !form.title.value ||
            !form.price.value ||
            !form.code.value ||
            !form.description.value ||
            !form.stock.value ||
            !form.category.value ||
            !form.thumbnail.value
        ) {
            Swal.fire("Debe rellenar todos los campos");
            return;
        }

    const producto = {
        title: form.title.value,
        thumbnail: form.thumbnail.value,
        price: Number(form.price.value),
        code: form.code.value,
        description: form.description.value,
        stock: Number(form.stock.value),
        category: form.category.value
    };

    fetch('/api/products', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(producto)
    })
        .then(response => response.json())
        .then(data => {
            Swal.fire("Producto agregado con éxito");
            form.reset(); // Limpiar los campos del formulario
        })
        .catch(error => Swal.fire("Error al agregar el producto"));
}

// Función para modificar producto
async function modificarProducto(event) {
    event.preventDefault();
    const form = event.target;
    const code = form.code.value;
    const getProductId = await obtenerProducto(code)
    const producto = {
        title: form.title.value || undefined,
        thumbnail: form.thumbnail.value || undefined,
        price: form.price.value ? Number(form.price.value) : undefined,
        stock: form.stock.value ? Number(form.stock.value) : undefined,
    };

    // Limpiar campos vacíos
    Object.keys(producto).forEach(key => producto[key] === undefined && delete producto[key]);

    fetch(`/api/products/${getProductId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(producto)
    })
        .then(response => response.json())
        .then(data => Swal.fire("Producto modificado con éxito"))
        .catch(error => Swal.fire("Error al modificar el producto"));
}

// Función para borrar producto
async function borrarProducto(event) {
    event.preventDefault();

    const form = event.target;
    const code = form.code.value;
    const getProductId = await obtenerProducto(code)

    fetch(`/api/products/${getProductId}`, {
        method: 'DELETE',
    })
        .then(response => response.json())
        .then(data => Swal.fire("Producto borrado con éxito"))
        .catch(error => Swal.fire("Error al borrar el producto"));
}


</script>